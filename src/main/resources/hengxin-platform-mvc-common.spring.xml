<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd   
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd   
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
	<aop:aspectj-autoproxy />
	<task:annotation-driven />
	
<!-- 	<bean id="appConfig" -->
<!-- 		class="org.springframework.context.support.ReloadableResourceBundleMessageSource"> -->
<!-- 		<property name="useCodeAsDefaultMessage" value="false" /> -->
<!-- 		<property name="defaultEncoding" value="UTF-8" /> -->
<!-- 		<property name="fileEncodings" value="UTF-8" /> -->
<!-- 		<property name="cacheSeconds" value="1" /> -->
<!-- 		<property name="basenames"> -->
<!-- 			<list> -->
<!-- 				<value>classpath:app-config</value> -->
<!-- 				<value>classpath:env-var</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	<!-- controller权限检查aop，不要移位置 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"
		depends-on="lifecycleBeanPostProcessor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<mvc:annotation-driven validator="validator">
		<mvc:message-converters>
			<bean
				class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
			<bean class="org.springframework.http.converter.StringHttpMessageConverter" />
			<bean
				class="com.hengxin.platform.common.util.web.ContentTypeNegotiatingJsonHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />

	<!-- the JSR-303 validator -->
	<bean id="webBindingInitializer"
		class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
		<property name="conversionService" ref="conversionService" />
		<property name="validator" ref="validator" />
	</bean>

	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />

	<!-- spring validation i18n -->
	<mvc:interceptors>
		<bean id="localeChangeInterceptor"
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="locale" />
		</bean>
		<bean id="menuInterceptor" class="com.hengxin.platform.common.controller.interceptor.MenuInterceptor" />
		<bean id="browserDetectionInterceptor" class="com.hengxin.platform.common.controller.interceptor.BrowserDetectionInterceptor" />
	</mvc:interceptors>
	
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />

	<!-- the controller validate exception handler for validation -->
	<bean id="exceptionResolver"
		class="com.hengxin.platform.common.controller.exception.ExceptionResolver" />

	<!-- file upload resolver, max size is 2000K -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="2198000" />
		<property name="resolveLazily" value="true"/>
	</bean>

	<aop:config expose-proxy="true"/>
	
	<bean id="velocityConfig"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/WEB-INF/views" />
		<property name="configLocation" value="classpath:velocity/velocity.properties" />
	</bean>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources/ directory -->
	<!-- <mvc:resources mapping="/assets/**" location="/assets/" /> -->

	<!-- Several resolver for spring integrate velocity, layout resolver is 
		used for layout -->
	<bean id="velocityViewResolver"
		class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
		<property name="suffix" value=".vm" />
		<property name="numberToolAttribute" value="numberTool" />
		<property name="toolboxConfigLocation" value="/WEB-INF/velocity/velocity-toolbox.xml" />
		<property name="layoutUrl" value="common/layout.vm" />
		<property name="contentType" value="text/html;charset=UTF-8" />
		<!-- if you want to use the Spring Velocity macros, set this property to 
			true -->
		<property name="exposeSpringMacroHelpers" value="true" />
		<!-- spring request context attribute name -->
		<property name="requestContextAttribute" value="rc" />
		<!-- expose session attribute so that velocity can access -->
		<property name="exposeSessionAttributes" value="true" />
		<!-- solve when expose model to session which contains same name -->
		<property name="allowSessionOverride" value="true" />
	</bean>

</beans>